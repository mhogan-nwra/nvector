[project]
name = "nvector"
dynamic = ["version"]
description = "The nvector library is a suite of tools written in Python to solve geographical position calculations forked from nvector."
authors = [
    {name = "Kenneth Gade, FFI"},
    {name = "Kristian Svartveit, FFI"},
    {name = "Brita Hafskjold Gade, FFI"},
    {name = "Matt Hogan", email = "mhogan@nwra.com"}
]
maintainers = [
  {name = "Per A. Brodtkorb, FFI"}
]
dependencies = [
    "numpy>=1.11.0",
    "scipy>=1.3.0",
    "karney>=1.0",
]

requires-python = ">=3.9"
readme = "README.rst"
license = {text = "Simplified BSD"}
license_file = "LICENSE.txt"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Environment :: Console",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: GIS"
]

[project.optional-dependencies]
plot =["matplotlib>=3.8.0",
       "Cartopy>=0.22.0",]

[project.urls]
repository  = "https://github.com/pbrod/nvector/"
documentation = "https://nvector.readthedocs.io/en/latest/"

[tool.semantic_release]
commit_parser = "angular"
logging_use_named_masks = true
allow_zero_version = true
tag_format = "v{version}"
version_variables = ["./src/nvector/__init__.py:__version__"]

commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release"

branch= "master" # branch to make releases of
build_command = "pip install pdm && pdm build"  # build dists   

[tool.semantic_release.changelog]

changelog_file = "CHANGELOG.rst"                       # changelog file
exclude_commit_patterns = [".*\\n\\nAutomatically generated by python-semantic-release", "chore: pre-commit autoupdate\n\nAutomatically generated by pre-commit.ci"]

[tool.semantic_release.commit_parser_options]
allowed_types = [
    "build", "chore", "ci", "docs", "feat", "fix",
    "perf", "style", "refactor", "test",
]
minor_types = ["feat"]
patch_types = ["fix", "perf"]

# chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
# docs: Documentation only changes
# feat: A new feature
# fix: A bug fix
# perf: A code change that improves performance
# refactor: A code change that neither fixes a bug nor adds a feature
# style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# test: Adding missing or correcting existing tests


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.version]
source = "file"
path = "src/nvector/__init__.py"

[tool.pdm.scripts]
sphinx_build = "sphinx-build -b html docs docs/_build/html -d docs/_build/doctrees"
sphinx_build_latex = "sphinx-build -b latex docs docs/_build/latex -d docs/_build/doctrees"
sphinx_build_latexpdf = "sphinx-build -b latexpdf docs docs/_build/latex -d docs/_build/doctrees"
lock_win64 = "pdm lock -L pdm_windows.lock --python 3.12 --strategy no_direct_minimal_versions --platform windows -dG all"
lock_linux = "pdm lock -L pdm_linux.lock --python 3.12 --strategy no_direct_minimal_versions --platform linux -dG all"

[tool.pdm.dev-dependencies]
build = [
    "setuptools>=39.2",  # MHogan: Pycharm complains oddly without this on Windows platform
    "spyder-kernels",    # Mhogan: If you want to use Spyder
    "python-semantic-release>=9.0.3",
]
test = [
    "nox",
    "pytest",
    "pytest-cov",
    "pytest-pep8",
    "hypothesis",
    "matplotlib>=3.8.0",
    "Cartopy>=0.22.0",
    "pytest-ruff>=0.4.1",
    "ruff>=0.0.47",
]
sphinx = [
    "sphinx>=1.3.1",
    "sphinx_rtd_theme>=0.1.7",
    "sphinxcontrib-napoleon",
    "sphinxcontrib-bibtex"
]
all = ["nvector[build,plot,test,sphinx]"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["E4", "E7", "E9", "E501", "F", "B", "Q"]  #[, "I"]

[tool.ruff.format]
#docstring-code-format = true
docstring-code-line-length = 100

[tool.pytest.ini_options]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL",  "ELLIPSIS"]
addopts = "-rsxXf --doctest-modules --cov=nvector --cov-report=xml --ruff --ruff-format"
testpaths = [
    "src"
]
